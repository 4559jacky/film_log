<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="movieMapper">

	<resultMap type="movieDto" id="movieMap">
		<result property="id" column="id"/>
		<result property="title" column="title"/>
		<result property="originalTitle" column="original_title"/>
		<result property="overview" column="overview"/>
		<result property="runtime" column="runtime"/>
		<result property="releaseDate" column="release_date"/>	
		<result property="voteAverage" column="vote_average"/>
		<result property="posterPath" column="poster_path"/>
		<result property="adult" column="adult"/>
		<collection property="actors" resultMap="actorMap"/>
	</resultMap>
	
	<resultMap type="actor" id="actorMap">
		<result property="id" column="id"/>
		<result property="name" column="name"/>
	</resultMap>
	
	<select id="selectMovieActors" resultMap="actorMap" parameterType="_int">
		SELECT a.id, a.name
		FROM actor a
		JOIN movie_actors ma
		ON a.id = ma.actor_id
		WHERE ma.movie_id = #{movieNo}
		limit 3;
	</select>
	
	<!-- 전체 영화 조회 -->
	<select id="selectMovieAll" resultMap="movieMap"  parameterType="movieDto">
		SELECT *
		FROM `movie_dto`
	</select>
	
	<!-- 배우 추가 -->
	<insert id="insertActor" parameterType="actor">
		INSERT IGNORE INTO `actor_dto` (id, name)
		VALUES (#{id},#{name})
	</insert>
	
	<!-- 장르 추가 -->
	<insert id="insertGenre" parameterType="genre">
		INSERT IGNORE INTO `genre_dto` (id, name)
		VALUES (#{id},#{name})
	</insert>
	
	<!-- 영화별 장르 매핑 -->
	<insert id="insertMovieGenre" parameterType="map">
	    INSERT INTO `movie_genre` (movie_id, genre_id)
	    VALUES
	    <foreach collection="list" item="genre" separator=",">
	        (#{movieId}, #{genre})
	    </foreach>
	</insert>
	
	<!-- API로 받아온 영화 추가(반복문) -->
	<!-- <insert id="insertMovieAll" parameterType="java.util.List">
		INSERT IGNORE INTO `movie_dto` (id, title, original_title, overview, runtime, release_date, vote_average, poster_path, adult)
		VALUES
		<foreach collection="list" item="movie" separator=",">
		(#{movie.id}, #{movie.title}, #{movie.originalTitle}, #{movie.overview}, #{movie.runtime}, #{movie.releaseDate}, #{movie.voteAverage}, #{movie.posterPath}, #{movie.adult})
		</foreach>2ws
	</insert> -->
	
	<!-- API로 받아온 영화 추가(하나씩) -->
	<insert id="insertMovie" parameterType="movieDto">
		INSERT IGNORE INTO `movie_dto` (id, title, original_title, overview, runtime, release_date, vote_average, poster_path, adult)
		VALUES
		(#{id}, #{title}, #{originalTitle}, #{overview}, #{runtime}, #{releaseDate}, #{voteAverage}, #{posterPath}, #{adult})
	</insert>
	
	<!-- 배우 추가(반복) -->
	<insert id="insertActorAll" parameterType="actor">
		INSERT IGNORE INTO `actor` (id, name, original_name, gender, `character`, profile_path)
		VALUES
		<foreach collection="list" item="actor" separator=",">
		 (#{actor.id}, #{actor.name}, #{actor.originalName}, #{actor.gender}, #{actor.character}, #{actor.profilePath})
		</foreach>
	</insert>
	
	<!-- 영화, 배우 매핑 -->
	<insert id="insertMovieActor" parameterType="map">
		INSERT INTO `movie_actors` (movie_id, actor_id)
		VALUES
		<foreach collection="list" item="actor" separator=",">
			 (#{movieId}, #{actor})
		</foreach>
	</insert>
	
	<!-- 감독 추가 -->
	<insert id="insertDirectorOne" parameterType="director">
		INSERT IGNORE INTO `director` (id, name, original_name, job, profile_path)
		VALUES (#{id}, #{name}, #{originalName}, #{job}, #{profilePath})
	</insert>
	
	<!-- 영화, 감독 매핑 -->
	<insert id="insertMovieDirector" parameterType="map">
		INSERT INTO `movie_director` (movie_id, director_id)
		VALUES (#{movieId}, #{directorId})
	</insert>
	
	
	<!-- 중복 검사 -->
	<select id="selectMovieById" resultType="com.filmlog.movie.model.vo.MovieDTO">
		SELECT *
		FROM `movie_dto`
		WHERE id = #{id}
	</select>

	<!-- 영화 목록 -->
	<select id="movieList" resultType="com.filmlog.movie.model.vo.MovieDTO">
        SELECT * 
        FROM `movie`
    </select>

	<select id="selectMovieListInHome" resultMap="movieMap" parameterType="member">
		SELECT md.id ,md.title ,md.vote_average ,md.poster_path
		FROM movie_dto md
		JOIN movie_genre mg
		ON md.id = mg.movie_id
		JOIN member_interest_genre mig
		ON mg.genre_id = mig.genre_id
		JOIN member m
		ON mig.member_no = m.member_no
		<where>
			<if test='memberNo != 0 and adminWhether != "T"'>
				AND m.member_no = #{memberNo}
			</if>
		</where>
		LIMIT 5;
	</select>

</mapper>